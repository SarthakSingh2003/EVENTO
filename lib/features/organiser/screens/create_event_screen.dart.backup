import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../../../core/models/event_model.dart';
import '../../../core/services/firestore_service.dart';
import '../../../core/services/auth_service.dart';
import '../../../app/theme/app_theme.dart';
import '../../../core/widgets/loading_indicator.dart';

class CreateEventScreen extends StatefulWidget {
  const CreateEventScreen({super.key});

  @override
  State<CreateEventScreen> createState() => _CreateEventScreenState();
}

class _CreateEventScreenState extends State<CreateEventScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _locationController = TextEditingController();
  final _venueDetailsController = TextEditingController();
  final _contactInfoController = TextEditingController();
  final _websiteController = TextEditingController();
  
  DateTime _selectedDate = DateTime.now().add(const Duration(days: 1));
  TimeOfDay _selectedTime = const TimeOfDay(hour: 18, minute: 0);
  double _latitude = 0.0;
  double _longitude = 0.0;
  
  String _selectedCategory = 'Technology';
  List<String> _selectedTags = [];
  String _eventType = 'Offline';
  bool _isFree = false;
  double _price = 0.0;
  int _totalTickets = 100;
  int _maxAttendees = 100;
  
  File? _bannerImage;
  bool _isLoading = false;
  bool _isImageLoading = false;
  
  final List<String> _categories = [
    'Technology', 'Music', 'Business', 'Education', 'Sports',
    'Arts & Culture', 'Food & Drink', 'Health & Wellness', 'Entertainment'
  ];
  
  final List<String> _availableTags = [
    'tech', 'music', 'business', 'food', 'art', 'sports', 
    'education', 'health', 'entertainment', 'startup', 
    'networking', 'festival', 'conference', 'workshop',
    'live', 'outdoor', 'indoor', 'virtual', 'hybrid'
  ];
  
  final List<String> _eventTypes = ['Offline', 'Online', 'Hybrid'];

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _locationController.dispose();
    _venueDetailsController.dispose();
    _contactInfoController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    setState(() => _isImageLoading = true);
    
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1200,
        maxHeight: 800,
        imageQuality: 85,
      );
      
      if (image != null) {
        setState(() {
          _bannerImage = File(image.path);
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error picking image: $e'),
          backgroundColor: AppTheme.errorColor,
        ),
      );
    } finally {
      setState(() => _isImageLoading = false);
    }
  }

  Future<void> _selectDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now().add(const Duration(days: 1)),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: AppTheme.primaryColor,
              onPrimary: AppTheme.secondaryColor,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() => _selectedDate = picked);
    }
  }

  Future<void> _selectTime() async {
    final TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: _selectedTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: AppTheme.primaryColor,
              onPrimary: AppTheme.secondaryColor,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() => _selectedTime = picked);
    }
  }

  void _onTagSelected(String tag) {
    setState(() {
      if (_selectedTags.contains(tag)) {
        _selectedTags.remove(tag);
      } else {
        _selectedTags.add(tag);
      }
    });
  }

  Future<bool> _onBackPressed() async {
    // Show confirmation dialog if user has entered data
    if (_titleController.text.isNotEmpty || 
        _descriptionController.text.isNotEmpty ||
        _locationController.text.isNotEmpty ||
        _bannerImage != null) {
      final shouldPop = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          backgroundColor: AppTheme.surfaceColor,
          title: const Text('Discard Changes?'),
          content: const Text('You have unsaved changes. Are you sure you want to go back?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text(
                'Cancel',
                style: TextStyle(color: AppTheme.primaryColor),
              ),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppTheme.errorColor,
                foregroundColor: Colors.white,
              ),
              child: const Text('Discard'),
            ),
          ],
        ),
      );
      return shouldPop ?? false;
    }
    return true;
  }

  void _goToHome() {
    Navigator.of(context).popUntil((route) => route.isFirst);
  }

  void _onEventCreated(String eventId) {
    // Show success message and navigate back
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Event created successfully! ID: $eventId'),
        backgroundColor: AppTheme.successColor,
        duration: const Duration(seconds: 3),
        action: SnackBarAction(
          label: 'View Event',
          textColor: AppTheme.secondaryColor,
          onPressed: () {
            // TODO: Navigate to event detail page
            Navigator.of(context).pop();
          },
        ),
      ),
    );
    
    // Navigate back to previous screen
    Navigator.of(context).pop();
  }

  Future<void> _createEvent() async {
    if (!_formKey.currentState!.validate()) return;
    
    setState(() => _isLoading = true);
    
    try {
      final event = EventModel(
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        location: _locationController.text.trim(),
        latitude: _latitude,
        longitude: _longitude,
        date: _selectedDate,
        time: DateTime(
          _selectedDate.year,
          _selectedDate.month,
          _selectedDate.day,
          _selectedTime.hour,
          _selectedTime.minute,
        ),
        totalTickets: _isFree ? 0 : _totalTickets,
        soldTickets: 0,
        price: _isFree ? 0.0 : _price,
        isFree: _isFree,
        organiserId: 'current-user-id', // TODO: Get from AuthService
        organiserName: 'Current User', // TODO: Get from AuthService
        bannerImage: _bannerImage?.path, // TODO: Upload to Firebase Storage
        category: _selectedCategory,
        tags: _selectedTags,
        isActive: true,
        isFeatured: false,
        createdAt: DateTime.now(),
        venueDetails: _venueDetailsController.text.trim(),
        eventType: _eventType,
        maxAttendees: _maxAttendees,
        contactInfo: _contactInfoController.text.trim(),
        website: _websiteController.text.trim(),
      );
      
      final eventId = await FirestoreService().createEvent(event);
      
      if (mounted) {
        _onEventCreated(eventId);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating event: $e'),
            backgroundColor: AppTheme.errorColor,
          ),
        );
      }
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onBackPressed,
      child: Focus(
        autofocus: true,
        onKeyEvent: (node, event) {
          // Handle Escape key for back navigation
          if (event is KeyDownEvent && event.logicalKey == LogicalKeyboardKey.escape) {
            _onBackPressed().then((shouldPop) {
              if (shouldPop) {
                Navigator.of(context).pop();
              }
            });
            return KeyEventResult.handled;
          }
          return KeyEventResult.ignored;
        },
        child: Scaffold(
          backgroundColor: AppTheme.backgroundColor,
          appBar: AppBar(
            backgroundColor: AppTheme.primaryColor,
            foregroundColor: AppTheme.secondaryColor,
            title: const Text('Create Event'),
            elevation: 0,
            automaticallyImplyLeading: false, // Explicitly disable auto-leading
            centerTitle: false, // Ensure title is left-aligned
            titleSpacing: 0, // Remove title spacing
            leading: Container(
              margin: const EdgeInsets.all(8),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, size: 28),
                onPressed: () async {
                  debugPrint('Back button pressed!');
                  if (await _onBackPressed()) {
                    debugPrint('Navigating back...');
                    Navigator.of(context).pop();
                  } else {
                    debugPrint('Back navigation cancelled by user');
                  }
                },
                tooltip: 'Go Back',
                style: IconButton.styleFrom(
                  backgroundColor: AppTheme.secondaryColor.withOpacity(0.1),
                  foregroundColor: AppTheme.secondaryColor,
                  padding: const EdgeInsets.all(8),
                ),
              ),
            ),
            actions: [
              IconButton(
                icon: const Icon(Icons.home, size: 24),
                onPressed: _goToHome,
                tooltip: 'Go to Home',
              ),
            ],
          ),
          body: _isLoading
              ? const Center(child: LoadingIndicator())
              : Form(
                  key: _formKey,
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Back Navigation Section (Alternative)
                        Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 8),
                          child: Row(
                            children: [
                              IconButton(
                                icon: const Icon(Icons.arrow_back, size: 24),
                                onPressed: () async {
                                  if (await _onBackPressed()) {
                                    Navigator.of(context).pop();
                                  }
                                },
                                style: IconButton.styleFrom(
                                  backgroundColor: AppTheme.primaryColor.withOpacity(0.1),
                                  foregroundColor: AppTheme.primaryColor,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                'Back to Dashboard',
                                style: TextStyle(
                                  color: AppTheme.primaryColor,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                        
                        // Banner Image Section
                        _buildBannerImageSection(),
                        
                        const SizedBox(height: 24),
                        
                        // Basic Information
                        _buildSectionTitle('Basic Information'),
                        _buildTextField(
                          controller: _titleController,
                          label: 'Event Title',
                          hint: 'Enter event title',
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter event title';
                            }
                            return null;
                          },
                        ),
                        
                        const SizedBox(height: 16),
                        
                        _buildTextField(
                          controller: _descriptionController,
                          label: 'Description',
                          hint: 'Describe your event',
                          maxLines: 4,
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter event description';
                            }
                            return null;
                          },
                        ),
                        
                        const SizedBox(height: 24),
                        
                        // Category and Tags
                        _buildSectionTitle('Category & Tags'),
                        _buildDropdown(
                          label: 'Category',
                          value: _selectedCategory,
                          items: _categories,
                          onChanged: (value) {
                            setState(() => _selectedCategory = value!);
                          },
                        ),
                        
                        const SizedBox(height: 16),
                        
                        _buildTagsSelector(),
                        
                        const SizedBox(height: 24),
                        
                        // Date and Time
                        _buildSectionTitle('Date & Time'),
                        Row(
                          children: [
                            Expanded(
                              child: _buildDatePicker(),
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: _buildTimePicker(),
                            ),
                          ],
                        ),
                        
                        const SizedBox(height: 24),
                        
                        // Location
                        _buildSectionTitle('Location'),
                        _buildTextField(
                          controller: _locationController,
                          label: 'Location',
                          hint: 'Enter event location',
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter event location';
                            }
                            return null;
                          },
                        ),
                        
                        const SizedBox(height: 16),
                        
                        _buildTextField(
                          controller: _venueDetailsController,
                          label: 'Venue Details (Optional)',
                          hint: 'Additional venue information',
                          maxLines: 2,
                        ),
                        
                        const SizedBox(height: 24),
                        
                        // Event Type
                        _buildSectionTitle('Event Type'),
                        _buildDropdown(
                          label: 'Event Format',
                          value: _eventType,
                          items: _eventTypes,
                          onChanged: (value) {
                            setState(() => _eventType = value!);
                          },
                        ),
                        
                        const SizedBox(height: 24),
                        
                        // Ticketing
                        _buildSectionTitle('Ticketing'),
                        _buildTicketingSection(),
                        
                        const SizedBox(height: 24),
                        
                        // Additional Information
                        _buildSectionTitle('Additional Information'),
                        _buildTextField(
                          controller: _contactInfoController,
                          label: 'Contact Information (Optional)',
                          hint: 'Phone, email, or other contact details',
                        ),
                        
                        const SizedBox(height: 16),
                        
                        _buildTextField(
                          controller: _websiteController,
                          label: 'Website (Optional)',
                          hint: 'Event website URL',
                        ),
                        
                        const SizedBox(height: 32),
                        
                        // Create Button
                        SizedBox(
                          width: double.infinity,
                          height: 56,
                          child: ElevatedButton(
                            onPressed: _createEvent,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: AppTheme.primaryColor,
                              foregroundColor: AppTheme.secondaryColor,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              elevation: 4,
                            ),
                            child: const Text(
                              'Create Event',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
          // Floating Back Button (Emergency Navigation)
          floatingActionButton: FloatingActionButton(
            onPressed: () async {
              if (await _onBackPressed()) {
                Navigator.of(context).pop();
              }
            },
            backgroundColor: AppTheme.primaryColor,
            foregroundColor: AppTheme.secondaryColor,
            child: const Icon(Icons.arrow_back),
            tooltip: 'Go Back',
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Text(
        title,
        style: const TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
          color: AppTheme.textPrimary,
        ),
      ),
    );
  }

  Widget _buildBannerImageSection() {
    return Container(
      width: double.infinity,
      height: 200,
      decoration: BoxDecoration(
        color: AppTheme.surfaceColor,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: AppTheme.dividerColor,
          width: 2,
        ),
      ),
      child: _bannerImage != null
          ? ClipRRect(
              borderRadius: BorderRadius.circular(14),
              child: Image.file(
                _bannerImage!,
                fit: BoxFit.cover,
                width: double.infinity,
                height: double.infinity,
              ),
            )
          : InkWell(
              onTap: _pickImage,
              borderRadius: BorderRadius.circular(14),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  if (_isImageLoading)
                    const CircularProgressIndicator(
                      color: AppTheme.primaryColor,
                    )
                  else ...[
                    Icon(
                      Icons.add_photo_alternate_outlined,
                      size: 48,
                      color: AppTheme.textSecondary,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Add Event Banner',
                      style: TextStyle(
                        fontSize: 16,
                        color: AppTheme.textSecondary,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Tap to select image',
                      style: TextStyle(
                        fontSize: 12,
                        color: AppTheme.textSecondary.withOpacity(0.7),
                      ),
                    ),
                  ],
                ],
              ),
            ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    required String hint,
    int maxLines = 1,
    String? Function(String?)? validator,
    ValueChanged<String>? onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppTheme.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          maxLines: maxLines,
          validator: validator,
          onChanged: onChanged,
          decoration: InputDecoration(
            hintText: hint,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: AppTheme.dividerColor),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: AppTheme.dividerColor),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: AppTheme.primaryColor, width: 2),
            ),
            filled: true,
            fillColor: AppTheme.inputBackground,
            contentPadding: const EdgeInsets.all(16),
          ),
        ),
      ],
    );
  }

  Widget _buildDropdown({
    required String label,
    required String value,
    required List<String> items,
    required ValueChanged<String?> onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppTheme.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          decoration: BoxDecoration(
            color: AppTheme.inputBackground,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: AppTheme.dividerColor),
          ),
          child: DropdownButtonHideUnderline(
            child: DropdownButton<String>(
              value: value,
              isExpanded: true,
              items: items.map((String item) {
                return DropdownMenuItem<String>(
                  value: item,
                  child: Text(item),
                );
              }).toList(),
              onChanged: onChanged,
              style: const TextStyle(
                fontSize: 16,
                color: AppTheme.textPrimary,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTagsSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Tags',
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppTheme.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: AppTheme.inputBackground,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: AppTheme.dividerColor),
          ),
          child: Wrap(
            spacing: 8,
            runSpacing: 8,
            children: _availableTags.map((tag) {
              final isSelected = _selectedTags.contains(tag);
              return FilterChip(
                label: Text(tag),
                selected: isSelected,
                onSelected: (selected) => _onTagSelected(tag),
                backgroundColor: isSelected 
                    ? AppTheme.primaryColor 
                    : AppTheme.primaryColor.withOpacity(0.1),
                selectedColor: AppTheme.primaryColor,
                labelStyle: TextStyle(
                  color: isSelected ? AppTheme.secondaryColor : AppTheme.primaryColor,
                  fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                ),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              );
            }).toList(),
          ),
        ),
      ],
    );
  }

  Widget _buildDatePicker() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Date',
          style: TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppTheme.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: _selectDate,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppTheme.inputBackground,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: AppTheme.dividerColor),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.calendar_today,
                  color: AppTheme.primaryColor,
                  size: 20,
                ),
                const SizedBox(width: 12),
                Text(
                  '${_selectedDate.day}/${_selectedDate.month}/${_selectedDate.year}',
                  style: const TextStyle(
                    fontSize: 16,
                    color: AppTheme.textPrimary,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTimePicker() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Time',
          style: TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w600,
            color: AppTheme.textPrimary,
          ),
        ),
        const SizedBox(height: 8),
        InkWell(
          onTap: _selectTime,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppTheme.inputBackground,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: AppTheme.dividerColor),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.access_time,
                  color: AppTheme.primaryColor,
                  size: 20,
                ),
                const SizedBox(width: 12),
                Text(
                  _selectedTime.format(context),
                  style: const TextStyle(
                    fontSize: 16,
                    color: AppTheme.textPrimary,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTicketingSection() {
    return Column(
      children: [
        // Free/Paid Toggle
        Row(
          children: [
            Expanded(
              child: _buildToggleOption(
                title: 'Free Event',
                subtitle: 'No tickets required',
                isSelected: _isFree,
                onTap: () => setState(() => _isFree = true),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildToggleOption(
                title: 'Paid Event',
                subtitle: 'Sell tickets',
                isSelected: !_isFree,
                onTap: () => setState(() => _isFree = false),
              ),
            ),
          ],
        ),
        
        if (!_isFree) ...[
          const SizedBox(height: 24),
          
          // Price
          _buildTextField(
            controller: TextEditingController(text: _price.toString()),
            label: 'Ticket Price (\$)',
            hint: '0.00',
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Please enter ticket price';
              }
              final price = double.tryParse(value);
              if (price == null || price < 0) {
                return 'Please enter a valid price';
              }
              return null;
            },
            onChanged: (value) {
              if (value.isNotEmpty) {
                setState(() => _price = double.tryParse(value) ?? 0.0);
              }
            },
          ),
          
          const SizedBox(height: 16),
          
          // Total Tickets
          _buildTextField(
            controller: TextEditingController(text: _totalTickets.toString()),
            label: 'Total Tickets Available',
            hint: '100',
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Please enter total tickets';
              }
              final tickets = int.tryParse(value);
              if (tickets == null || tickets <= 0) {
                return 'Please enter a valid number of tickets';
              }
              return null;
            },
            onChanged: (value) {
              if (value.isNotEmpty) {
                setState(() => _totalTickets = int.tryParse(value) ?? 100);
              }
            },
          ),
        ],
        
        const SizedBox(height: 16),
        
        // Max Attendees
        _buildTextField(
          controller: TextEditingController(text: _maxAttendees.toString()),
          label: 'Maximum Attendees',
          hint: '100',
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Please enter maximum attendees';
            }
            final attendees = int.tryParse(value);
            if (attendees == null || attendees <= 0) {
              return 'Please enter a valid number of attendees';
            }
            return null;
          },
          onChanged: (value) {
            if (value.isNotEmpty) {
              setState(() => _maxAttendees = int.tryParse(value) ?? 100);
            }
          },
        ),
      ],
    );
  }

  Widget _buildToggleOption({
    required String title,
    required String subtitle,
    required bool isSelected,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: isSelected ? AppTheme.primaryColor : AppTheme.surfaceColor,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isSelected ? AppTheme.primaryColor : AppTheme.dividerColor,
            width: 2,
          ),
        ),
        child: Column(
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: isSelected ? AppTheme.secondaryColor : AppTheme.textPrimary,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              subtitle,
              style: TextStyle(
                fontSize: 12,
                color: isSelected 
                    ? AppTheme.secondaryColor.withOpacity(0.8)
                    : AppTheme.textSecondary,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
} 